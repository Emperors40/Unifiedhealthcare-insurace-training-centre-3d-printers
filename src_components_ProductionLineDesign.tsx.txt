'use client'

import { Suspense, useState, useEffect, useCallback, useMemo } from 'react'
import { Canvas } from '@react-three/fiber'
import { OrbitControls, useGLTF, Html } from '@react-three/drei'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog'
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table'
import { Loader2, Zap, TrendingUp, TrendingDown, AlertTriangle } from 'lucide-react'
import { Progress } from '@/components/ui/progress'
import { Badge } from '@/components/ui/badge'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, BarChart, Bar, Legend } from 'recharts'

const partDetails = {
  base: { name: 'Base Component', material: 'Aluminum', dimensions: '500mm x 500mm x 50mm', weight: '5kg' },
  body: { name: 'Main Body', material: 'Steel', dimensions: '400mm x 300mm x 600mm', weight: '15kg' },
  cover: { name: 'Top Cover', material: 'Plastic', dimensions: '410mm x 310mm x 10mm', weight: '1kg' },
  motor: { name: 'Electric Motor', material: 'Various', dimensions: '200mm x 150mm x 150mm', weight: '8kg' },
  control: { name: 'Control Panel', material: 'Various', dimensions: '300mm x 200mm x 100mm', weight: '3kg' },
}

function ProductionLineModel({ onPartClick }) {
  const { scene } = useGLTF('/assets/3d/duck.glb')
  return (
    <group onClick={(e) => {
      e.stopPropagation()
      onPartClick(e.object.name)
    }}>
      <primitive object={scene} scale={2} />
      {Object.keys(partDetails).map((part, index) => (
        <Html key={part} position={[2, index * 0.5 - 1, 0]}>
          <div className="bg-background/80 p-2 rounded-md cursor-pointer" onClick={() => onPartClick(part)}>
            <p className="text-sm">{partDetails[part].name}</p>
          </div>
        </Html>
      ))}
    </group>
  )
}

function generateHistoricalData(initialValue, days = 30) {
  const data = []
  let value = initialValue
  for (let i = days; i >= 0; i--) {
    data.push({
      day: i,
      value: Math.max(0, Math.min(100, value + (Math.random() * 10 - 5)))
    })
    value = data[data.length - 1].value
  }
  return data
}

function predictFutureValue(historicalData, days = 7) {
  const lastValue = historicalData[historicalData.length - 1].value
  const trend = (historicalData[historicalData.length - 1].value - historicalData[0].value) / historicalData.length
  return historicalData.concat(
    Array.from({ length: days }, (_, i) => ({
      day: historicalData.length + i,
      value: Math.max(0, Math.min(100, lastValue + trend * (i + 1) + (Math.random() * 5 - 2.5)))
    }))
  )
}

export default function ProductionLineDesign() {
  const [selectedPart, setSelectedPart] = useState(null)
  const [isDialogOpen, setIsDialogOpen] = useState(false)
  const [isGeneratingCAD, setIsGeneratingCAD] = useState(false)
  const [optimizationSuggestions, setOptimizationSuggestions] = useState([])
  const [efficiency, setEfficiency] = useState(75)
  const [productionRate, setProductionRate] = useState(100)
  const [qualityScore, setQualityScore] = useState(90)
  const [energyConsumption, setEnergyConsumption] = useState(80)
  const [maintenanceScore, setMaintenanceScore] = useState(85)
  const [historicalData, setHistoricalData] = useState({
    efficiency: [],
    productionRate: [],
    qualityScore: [],
    energyConsumption: [],
    maintenanceScore: [],
  })
  const [aiPredictions, setAiPredictions] = useState({})
  const [bottlenecks, setBottlenecks] = useState([])

  const handlePartClick = useCallback((partName) => {
    setSelectedPart(partDetails[partName])
    setIsDialogOpen(true)
  }, [])

  const handleGenerateCAD = useCallback(() => {
    setIsGeneratingCAD(true)
    setTimeout(() => {
      setIsGeneratingCAD(false)
      alert('CAD file generated successfully!')
    }, 3000)
  }, [])

  useEffect(() => {
    setHistoricalData({
      efficiency: generateHistoricalData(efficiency),
      productionRate: generateHistoricalData(productionRate),
      qualityScore: generateHistoricalData(qualityScore),
      energyConsumption: generateHistoricalData(energyConsumption),
      maintenanceScore: generateHistoricalData(maintenanceScore),
    })

    const interval = setInterval(() => {
      setEfficiency(prev => Math.min(100, Math.max(0, prev + (Math.random() * 4 - 2))))
      setProductionRate(prev => Math.min(150, Math.max(50, prev + (Math.random() * 10 - 5))))
      setQualityScore(prev => Math.min(100, Math.max(0, prev + (Math.random() * 4 - 2))))
      setEnergyConsumption(prev => Math.min(100, Math.max(0, prev + (Math.random() * 4 - 2))))
      setMaintenanceScore(prev => Math.min(100, Math.max(0, prev + (Math.random() * 4 - 2))))

      setHistoricalData(prev => ({
        efficiency: [...prev.efficiency.slice(1), { day: 0, value: efficiency }],
        productionRate: [...prev.productionRate.slice(1), { day: 0, value: productionRate }],
        qualityScore: [...prev.qualityScore.slice(1), { day: 0, value: qualityScore }],
        energyConsumption: [...prev.energyConsumption.slice(1), { day: 0, value: energyConsumption }],
        maintenanceScore: [...prev.maintenanceScore.slice(1), { day: 0, value: maintenanceScore }],
      }))

      const newSuggestions = [
        "Adjust motor speed to optimize energy consumption",
        "Schedule preventive maintenance for the control panel",
        "Upgrade material handling system to reduce bottlenecks",
        "Implement machine learning algorithms for predictive quality control",
        "Optimize assembly line layout for improved worker ergonomics"
      ]
      setOptimizationSuggestions(newSuggestions.sort(() => 0.5 - Math.random()).slice(0, 3))

      const newBottlenecks = [
        { stage: 'Assembly', impact: Math.random() * 20 },
        { stage: 'Quality Control', impact: Math.random() * 15 },
        { stage: 'Packaging', impact: Math.random() * 10 },
      ].sort((a, b) => b.impact - a.impact)
      setBottlenecks(newBottlenecks)
    }, 5000)

    return () => clearInterval(interval)
  }, [efficiency, productionRate, qualityScore, energyConsumption, maintenanceScore])

  useEffect(() => {
    const predictions = {
      efficiency: predictFutureValue(historicalData.efficiency),
      productionRate: predictFutureValue(historicalData.productionRate),
      qualityScore: predictFutureValue(historicalData.qualityScore),
      energyConsumption: predictFutureValue(historicalData.energyConsumption),
      maintenanceScore: predictFutureValue(historicalData.maintenanceScore),
    }
    setAiPredictions(predictions)
  }, [historicalData])

  const overallPerformance = useMemo(() => {
    return (efficiency + (productionRate / 1.5) + qualityScore + (100 - energyConsumption) + maintenanceScore) / 5
  }, [efficiency, productionRate, qualityScore, energyConsumption, maintenanceScore])

  return (
    <Card className="w-full">
      <CardHeader>
        <CardTitle>AI-Optimized Production Line Design</CardTitle>
        <CardDescription>Real-time 3D visualization with advanced AI-driven optimization and simulation</CardDescription>
      </CardHeader>
      <CardContent>
        <div className="grid grid-cols-2 gap-4 mb-4">
          <div>
            <p className="text-sm font-medium mb-1">Overall Performance</p>
            <div className="flex items-center">
              <Progress value={overallPerformance} className="w-full mr-2" />
              <span className="text-sm font-medium">{overallPerformance.toFixed(1)}%</span>
            </div>
          </div>
          <div>
            <p className="text-sm font-medium mb-1">Production Rate</p>
            <div className="flex items-center">
              <Progress value={(productionRate / 150) * 100} className="w-full mr-2" />
              <span className="text-sm font-medium">{productionRate.toFixed(1)} units/hour</span>
            </div>
          </div>
          <div>
            <p className="text-sm font-medium mb-1">Quality Score</p>
            <div className="
