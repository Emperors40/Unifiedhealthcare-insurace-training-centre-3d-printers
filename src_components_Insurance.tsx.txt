'use client'

import { useState, useEffect, useMemo } from 'react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog'
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table'
import { Progress } from '@/components/ui/progress'
import { Badge } from '@/components/ui/badge'
import { AlertTriangle, CheckCircle, Zap, TrendingDown, TrendingUp } from 'lucide-react'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts'

function generateHistoricalPremiums(currentPremium, months = 12) {
  const data = []
  let premium = currentPremium
  for (let i = months; i >= 0; i--) {
    data.push({
      month: i,
      premium: Math.max(5000, Math.min(20000, premium + (Math.random() * 1000 - 500)))
    })
    premium = data[data.length - 1].premium
  }
  return data
}

function predictFuturePremium(historicalData, months = 3) {
  const lastPremium = historicalData[historicalData.length - 1].premium
  const trend = (historicalData[historicalData.length - 1].premium - historicalData[0].premium) / historicalData.length
  return historicalData.concat(
    Array.from({ length: months }, (_, i) => ({
      month: historicalData.length + i,
      premium: Math.max(5000, Math.min(20000, lastPremium + trend * (i + 1) + (Math.random() * 500 - 250)))
    }))
  )
}

export default function Insurance() {
  const [isDialogOpen, setIsDialogOpen] = useState(false)
  const [premium, setPremium] = useState(10000)
  const [healthScore, setHealthScore] = useState(90)
  const [riskFactors, setRiskFactors] = useState([])
  const [recommendations, setRecommendations] = useState([])
  const [historicalPremiums, setHistoricalPremiums] = useState([])
  const [personalizedPlans, setPersonalizedPlans] = useState([])
  const [aiPrediction, setAiPrediction] = useState(null)

  useEffect(() => {
    const interval = setInterval(() => {
      setHealthScore(prevScore => {
        const newScore = Math.max(50, Math.min(100, prevScore + (Math.random() * 10 - 5)))
        const basePremium = 10000
        const healthFactor = 1 + ((100 - newScore) / 100)
        const newPremium = Math.round(basePremium * healthFactor)
        setPremium(newPremium)
        
        const newRiskFactors = []
        const newRecommendations = []
        if (newScore < 70) {
          newRiskFactors.push('Low overall health score')
          newRecommendations.push('Schedule a comprehensive health checkup')
        }
        if (newScore % 2 === 0) {
          newRiskFactors.push('Sedentary lifestyle')
          newRecommendations.push('Increase daily physical activity')
        }
        if (newScore % 3 === 0) {
          newRiskFactors.push('Poor diet')
          newRecommendations.push('Consult with a nutritionist for a balanced meal plan')
        }
        setRiskFactors(newRiskFactors)
        setRecommendations(newRecommendations)
        
        return newScore
      })
    }, 60000)

    const initialHistoricalPremiums = generateHistoricalPremiums(premium)
    setHistoricalPremiums(initialHistoricalPremiums)

    const predictionData = predictFuturePremium(initialHistoricalPremiums)
    const predictedPremium = predictionData[predictionData.length - 1].premium
    setAiPrediction({
      premium: predictedPremium,
      data: predictionData
    })

    setPersonalizedPlans([
      { name: 'Basic', coverage: '70%', premium: Math.round(premium * 0.8) },
      { name: 'Standard', coverage: '85%', premium: premium },
      { name: 'Premium', coverage: '95%', premium: Math.round(premium * 1.2) },
    ])

    return () => clearInterval(interval)
  }, [])

  const coverageDetails = [
    { service: 'General Checkups', coverage: '100%' },
    { service: 'Specialist Consultations', coverage: '80%' },
    { service: 'Hospitalization', coverage: '90%' },
    { service: 'Prescription Drugs', coverage: '75%' },
    { service: 'Emergency Services', coverage: '100%' },
    { service: 'Preventive Care', coverage: '100%' },
    { service: 'Mental Health Services', coverage: '80%' },
    { service: 'Rehabilitation', coverage: '70%' },
  ]

  const premiumTrend = useMemo(() => {
    if (historicalPremiums.length < 2) return 0
    const lastTwo = historicalPremiums.slice(-2)
    return lastTwo[1].premium - lastTwo[0].premium
  }, [historicalPremiums])

  return (
    <Card className="w-full">
      <CardHeader>
        <CardTitle>AI-Powered Dynamic Insurance</CardTitle>
        <CardDescription>Personalized healthcare insurance plans based on real-time health data and predictive analytics</CardDescription>
      </CardHeader>
      <CardContent>
        <div className="mb-4">
          <div className="flex justify-between items-center mb-2">
            <p className="text-sm font-medium">Health Score</p>
            <Badge variant={healthScore >= 90 ? 'default' : healthScore >= 70 ? 'secondary' : 'destructive'}>
              {healthScore >= 90 ? 'Excellent' : healthScore >= 70 ? 'Good' : 'Needs Improvement'}
            </Badge>
          </div>
          <div className="flex items-center">
            <Progress value={healthScore} className="w-full mr-4" />
            <span className="text-sm font-medium">{Math.round(healthScore)}%</span>
          </div>
        </div>
        <p className="mb-4 text-2xl font-bold">Current Premium: â‚¦{premium.toLocaleString()}</p>
        <div className="flex items-center mb-4">
          <p className="mr-2">Premium Trend:</p>
          {premiumTrend > 0 ? (
            <TrendingUp className="text-red-500 mr-1" />
          ) : (
            <TrendingDown className="text-green-500 mr-1" />
          )}
          <span className={premiumTrend > 0 ? 'text-red-500' : 'text-green-500'}>
            {Math.abs(premiumTrend).toFixed(2)}%
          </span>
        </div>
        <p className="mb-4">This AI-optimized plan dynamically adjusts based on your real-time health data and lifestyle choices.</p>
        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
          <DialogTrigger asChild>
            <Button>View Detailed Analysis</Button>
          </DialogTrigger>
          <DialogContent className="sm:max-w-[800px]">
            <DialogHeader>
              <DialogTitle>Insurance Analysis Dashboard</DialogTitle>
              <DialogDescription>
                Comprehensive insurance data, risk assessment, and personalized recommendations
              </DialogDescription>
            </DialogHeader>
            <Tabs defaultValue="coverage">
              <TabsList>
                <TabsTrigger value="coverage">Coverage Details</TabsTrigger>
                <TabsTrigger value="risk">Risk Assessment</TabsTrigger>
                <TabsTrigger value="history">Premium History</TabsTrigger>
                <TabsTrigger value="prediction">AI Prediction</TabsTrigger>
                <TabsTrigger value="plans">Personalized Plans</TabsTrigger>
              </TabsList>
              <TabsContent value="coverage">
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>Service</TableHead>
                      <TableHead>Coverage</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {coverageDetails.map((item, index) => (
                      <TableRow key={index}>
                        <TableCell>{item.service}</TableCell>
                        <TableCell>{item.coverage}</TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </TabsContent>
              <TabsContent value="risk">
                <div className="space-y-4">
                  <div>
                    <h4 className="font-semibold mb-2">AI-Identified Risk Factors:</h4>
                    <ul className="list-disc list-inside">
                      {riskFactors.map((factor, index) => (
                        <li key={index} className="text-yellow-600">
                          <AlertTriangle className="inline-block w-4 h-4 mr-2" />
                          {factor}
                        </li>
                      ))}
                    </ul>
                  </div>
                  <div>
                    <h4 className="font-semibold mb-2">Personalized Recommendations:</h4>
                    <ul className="list-disc list-inside">
                      {recommendations.map((rec, index) => (
                        <li key={index} className="text-green-600">
                          <CheckCircle className="inline-block w-4 h-4 mr-2" />
                          {rec}
                        </li>
                      ))}
                    </ul>
                  </div>
                </div>
              </TabsContent>
              <TabsContent value="history">
                <div className="h-[300px]">
                  <ResponsiveContainer width="100%" height="100%">
                    <LineChart data={historicalPremiums}>
                      <CartesianGrid strokeDasharray="3 3" />
                      <XAxis dataKey="month" />
                      <YAxis />
                      <Tooltip />
                      <Line type="monotone" dataKey="premium" name="Premium" stroke="#8884d8" />
                    </LineChart>
                  </ResponsiveContainer>
                </div>
              </TabsContent>
              <TabsContent value="prediction">
                {aiPrediction && (
                  <>
                    <div className="h-[300px]">
                      <ResponsiveContainer width="100%" height="100%">
                        <LineChart data={aiPrediction.data}>
                          <CartesianGrid strokeDasharray="3 3" />
                          <XAxis dataKey="month" />
                          <YAxis />
                          <Tooltip />
                          <Line type="monotone" dataKey="premium" name="Premium" stroke="#8884d8" />
                          <Line type="monotone" dataKey="premium" name="Predicted Premium" stroke="#82ca9d" strokeDasharray="3 3" />
                        </LineChart>
                      </ResponsiveContainer>
                    </div>
                    <Table className="mt-4">
                      <TableBody>
                        <TableRow>
                          <TableCell className="font-medium">Predicted Premium (3 months)</TableCell>
                          <TableCell>â‚¦{aiPrediction.premium.toFixed(2)}</TableCell>
                        </TableRow>
                        <TableRow>
                          <TableCell className="font-medium">Predicted Change</TableCell>
                          <TableCell>
                            {aiPrediction.premium > premium ? (
                              <span className="text-red-500">+{((aiPrediction.premium - premium) / premium * 100).toFixed(2)}%</span>
                            ) : (
                              <span className="text-green-500">-{((premium - aiPrediction.premium) / premium * 100).toFixed(2)}%</span>
                            )}
                          </TableCell>
                        </TableRow>
                      </TableBody>
                    </Table>
                  </>
                )}
              </TabsContent>
              <TabsContent value="plans">
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>Plan</TableHead>
                      <TableHead>Coverage</TableHead>
                      <TableHead>Premium</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {personalizedPlans.map((plan, index) => (
                      <TableRow key={index}>
                        <TableCell>{plan.name}</TableCell>
                        <TableCell>{plan.coverage}</TableCell>
                        <TableCell>â‚¦{plan.premium.toLocaleString()}</TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </TabsContent>
            </Tabs>
          </DialogContent>
        </Dialog>
      </CardContent>
    </Card>
  )
}
