'use client'

import { useState, useEffect } from 'react'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { Activity, Cog, FileStack, Glasses, Bell, Settings } from 'lucide-react'
import HealthMonitoring from './HealthMonitoring'
import Insurance from './Insurance'
import ProductionLineDesign from './ProductionLineDesign'
import ARVision from './ARVision'
import { Button } from '@/components/ui/button'
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog'
import { Progress } from '@/components/ui/progress'
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip'

export default function Dashboard() {
  const [activeTab, setActiveTab] = useState('health')
  const [overallScore, setOverallScore] = useState(85)
  const [notifications, setNotifications] = useState([])
  const [isSettingsOpen, setIsSettingsOpen] = useState(false)

  useEffect(() => {
    const interval = setInterval(() => {
      setOverallScore(prev => Math.max(0, Math.min(100, prev + (Math.random() * 4 - 2))))
      
      if (Math.random() > 0.7) {
        const newNotification = {
          id: Date.now(),
          message: getRandomNotification(),
          type: Math.random() > 0.5 ? 'info' : 'warning'
        }
        setNotifications(prev => [newNotification, ...prev].slice(0, 5))
      }
    }, 10000)

    return () => clearInterval(interval)
  }, [])

  const getRandomNotification = () => {
    const notifications = [
      "Your heart rate has been elevated for the past hour. Consider taking a break.",
      "Production line efficiency has increased by 5% due to recent optimizations.",
      "New AI-generated insurance plan available based on your latest health data.",
      "AR assembly guide for new product model is now ready for testing.",
      "Detected potential issue in the production line. Check the ProductionLineDesign tab for details."
    ]
    return notifications[Math.floor(Math.random() * notifications.length)]
  }

  return (
    <div className="container mx-auto p-4">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-4xl font-bold">Unified Healthcare Dashboard</h1>
        <div className="flex items-center space-x-4">
          <div className="text-right">
            <p className="text-sm text-muted-foreground">Overall System Score</p>
            <div className="flex items-center">
              <Progress value={overallScore} className="w-40 mr-2" />
              <span className="font-bold">{Math.round(overallScore)}%</span>
            </div>
          </div>
          <TooltipProvider>
            <Tooltip>
              <TooltipTrigger asChild>
                <Dialog>
                  <DialogTrigger asChild>
                    <Button variant="outline" size="icon">
                      <Bell className="h-4 w-4" />
                    </Button>
                  </DialogTrigger>
                  <DialogContent>
                    <DialogHeader>
                      <DialogTitle>Notifications</DialogTitle>
                      <DialogDescription>
                        Recent updates and alerts from the system
                      </DialogDescription>
                    </DialogHeader>
                    <div className="space-y-4">
                      {notifications.map(notification => (
                        <div key={notification.id} className={`p-2 rounded-md ${notification.type === 'info' ? 'bg-blue-100' : 'bg-yellow-100'}`}>
                          <p className="text-sm">{notification.message}</p>
                        </div>
                      ))}
                    </div>
                  </DialogContent>
                </Dialog>
              </TooltipTrigger>
              <TooltipContent>
                <p>Notifications</p>
              </TooltipContent>
            </Tooltip>
          </TooltipProvider>
          <TooltipProvider>
            <Tooltip>
              <TooltipTrigger asChild>
                <Button variant="outline" size="icon" onClick={() => setIsSettingsOpen(true)}>
                  <Settings className="h-4 w-4" />
                </Button>
              </TooltipTrigger>
              <TooltipContent>
                <p>Settings</p>
              </TooltipContent>
            </Tooltip>
          </TooltipProvider>
        </div>
      </div>
      <Tabs value={activeTab} onValueChange={setActiveTab}>
        <TabsList className="grid w-full grid-cols-4 mb-4">
          <TabsTrigger value="health">
            <Activity className="mr-2 h-4 w-4" />
            Health Monitoring
          </TabsTrigger>
          <TabsTrigger value="insurance">
            <FileStack className="mr-2 h-4 w-4" />
            Insurance
          </TabsTrigger>
          <TabsTrigger value="production">
            <Cog className="mr-2 h-4 w-4" />
            Production Line
          </TabsTrigger>
          <TabsTrigger value="ar">
            <Glasses className="mr-2 h-4 w-4" />
            AR Vision
          </TabsTrigger>
        </TabsList>
        <TabsContent value="health">
          <HealthMonitoring />
        </TabsContent>
        <TabsContent value="insurance">
          <Insurance />
        </TabsContent>
        <TabsContent value="production">
          <ProductionLineDesign />
        </TabsContent>
        <TabsContent value="ar">
          <ARVision />
        </TabsContent>
      </Tabs>
      <Dialog open={isSettingsOpen} onOpenChange={setIsSettingsOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Settings</DialogTitle>
            <DialogDescription>
              Customize your dashboard experience
            </DialogDescription>
          </DialogHeader>
          <div className="space-y-4">
            <div className="flex items-center justify-between">
              <span>Dark Mode</span>
              <Button variant="outline" onClick={() => document.body.classList.toggle('dark')}>
                Toggle
              </Button>
            </div>
            <div className="flex items-center justify-between">
              <span>Notification Frequency</span>
              <select className="border rounded p-1">
                <option>High</option>
                <option>Medium</option>
                <option>Low</option>
              </select>
            </div>
          </div>
        </DialogContent>
      </Dialog>
    </div>
  )
}
