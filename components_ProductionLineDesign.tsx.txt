'use client'

import { Suspense, useState, useEffect, useCallback } from 'react'
import { Canvas } from '@react-three/fiber'
import { OrbitControls, useGLTF, Html } from '@react-three/drei'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog'
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table'
import { Loader2, Zap, TrendingUp, TrendingDown } from 'lucide-react'
import { Progress } from '@/components/ui/progress'
import { Badge } from '@/components/ui/badge'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts'

const partDetails = {
  base: { name: 'Base Component', material: 'Aluminum', dimensions: '500mm x 500mm x 50mm', weight: '5kg' },
  body: { name: 'Main Body', material: 'Steel', dimensions: '400mm x 300mm x 600mm', weight: '15kg' },
  cover: { name: 'Top Cover', material: 'Plastic', dimensions: '410mm x 310mm x 10mm', weight: '1kg' },
  motor: { name: 'Electric Motor', material: 'Various', dimensions: '200mm x 150mm x 150mm', weight: '8kg' },
  control: { name: 'Control Panel', material: 'Various', dimensions: '300mm x 200mm x 100mm', weight: '3kg' },
}

function ProductionLineModel({ onPartClick }) {
  const { scene } = useGLTF('/assets/3d/duck.glb')
  return (
    <group onClick={(e) => {
      e.stopPropagation()
      onPartClick(e.object.name)
    }}>
      <primitive object={scene} scale={2} />
      {Object.keys(partDetails).map((part, index) => (
        <Html key={part} position={[2, index * 0.5 - 1, 0]}>
          <div className="bg-background/80 p-2 rounded-md cursor-pointer" onClick={() => onPartClick(part)}>
            <p className="text-sm">{partDetails[part].name}</p>
          </div>
        </Html>
      ))}
    </group>
  )
}

function generateHistoricalData(initialValue) {
  const data = []
  for (let i = 30; i >= 0; i--) {
    data.push({
      day: i,
      value: Math.max(0, Math.min(100, initialValue + (Math.random() * 20 - 10)))
    })
  }
  return data
}

export default function ProductionLineDesign() {
  const [selectedPart, setSelectedPart] = useState(null)
  const [isDialogOpen, setIsDialogOpen] = useState(false)
  const [isGeneratingCAD, setIsGeneratingCAD] = useState(false)
  const [optimizationSuggestions, setOptimizationSuggestions] = useState([])
  const [efficiency, setEfficiency] = useState(75)
  const [productionRate, setProductionRate] = useState(100)
  const [qualityScore, setQualityScore] = useState(90)
  const [energyConsumption, setEnergyConsumption] = useState(80)
  const [maintenanceScore, setMaintenanceScore] = useState(85)
  const [historicalData, setHistoricalData] = useState({
    efficiency: [],
    productionRate: [],
    qualityScore: [],
    energyConsumption: [],
    maintenanceScore: [],
  })

  const handlePartClick = useCallback((partName) => {
    setSelectedPart(partDetails[partName])
    setIsDialogOpen(true)
  }, [])

  const handleGenerateCAD = useCallback(() => {
    setIsGeneratingCAD(true)
    setTimeout(() => {
      setIsGeneratingCAD(false)
      alert('CAD file generated successfully!')
    }, 3000)
  }, [])

  useEffect(() => {
    // Generate initial historical data
    setHistoricalData({
      efficiency: generateHistoricalData(efficiency),
      productionRate: generateHistoricalData(productionRate),
      qualityScore: generateHistoricalData(qualityScore),
      energyConsumption: generateHistoricalData(energyConsumption),
      maintenanceScore: generateHistoricalData(maintenanceScore),
    })

    // Simulate real-time updates
    const interval = setInterval(() => {
      setEfficiency(prev => Math.min(100, Math.max(0, prev + (Math.random() * 4 - 2))))
      setProductionRate(prev => Math.min(150, Math.max(50, prev + (Math.random() * 10 - 5))))
      setQualityScore(prev => Math.min(100, Math.max(0, prev + (Math.random() * 4 - 2))))
      setEnergyConsumption(prev => Math.min(100, Math.max(0, prev + (Math.random() * 4 - 2))))
      setMaintenanceScore(prev => Math.min(100, Math.max(0, prev + (Math.random() * 4 - 2))))

      // Update historical data
      setHistoricalData(prev => ({
        efficiency: [...prev.efficiency.slice(1), { day: 0, value: efficiency }],
        productionRate: [...prev.productionRate.slice(1), { day: 0, value: productionRate }],
        qualityScore: [...prev.qualityScore.slice(1), { day: 0, value: qualityScore }],
        energyConsumption: [...prev.energyConsumption.slice(1), { day: 0, value: energyConsumption }],
        maintenanceScore: [...prev.maintenanceScore.slice(1), { day: 0, value: maintenanceScore }],
      }))

      // Generate new optimization suggestions
      const newSuggestions = [
        "Adjust motor speed to optimize energy consumption",
        "Schedule preventive maintenance for the control panel",
        "Upgrade material handling system to reduce bottlenecks",
        "Implement machine learning algorithms for predictive quality control",
        "Optimize assembly line layout for improved worker ergonomics"
      ]
      setOptimizationSuggestions(newSuggestions.sort(() => 0.5 - Math.random()).slice(0, 3))
    }, 5000) // Update every 5 seconds for demonstration

    return () => clearInterval(interval)
  }, [efficiency, productionRate, qualityScore, energyConsumption, maintenanceScore])

  return (
    <Card className="w-full">
      <CardHeader>
        <CardTitle>AI-Optimized Production Line Design</CardTitle>
        <CardDescription>Real-time 3D visualization with advanced AI-driven optimization and simulation</CardDescription>
      </CardHeader>
      <CardContent>
        <div className="grid grid-cols-2 gap-4 mb-4">
          <div>
            <p className="text-sm font-medium mb-1">Overall Efficiency</p>
            <div className="flex items-center">
              <Progress value={efficiency} className="w-full mr-2" />
              <span className="text-sm font-medium">{efficiency.toFixed(1)}%</span>
            </div>
          </div>
          <div>
            <p className="text-sm font-medium mb-1">Production Rate</p>
            <div className="flex items-center">
              <Progress value={(productionRate / 150) * 100} className="w-full mr-2" />
              <span className="text-sm font-medium">{productionRate.toFixed(1)} units/hour</span>
            </div>
          </div>
          <div>
            <p className="text-sm font-medium mb-1">Quality Score</p>
            <div className="flex items-center">
              <Progress value={qualityScore} className="w-full mr-2" />
              <span className="text-sm font-medium">{qualityScore.toFixed(1)}%</span>
            </div>
          </div>
          <div>
            <p className="text-sm font-medium mb-1">Energy Consumption</p>
            <div className="flex items-center">
              <Progress value={energyConsumption} className="w-full mr-2" />
              <span className="text-sm font-medium">{energyConsumption.toFixed(1)}%</span>
            </div>
          </div>
        </div>
        <div className="h-[500px] w-full">
          <Canvas camera={{ position: [0, 0, 10] }}>
            <ambientLight intensity={0.5} />
            <spotLight position={[10, 10, 10]} angle={0.15} penumbra={1} />
            <pointLight position={[-10, -10, -10]} />
            <Suspense fallback={null}>
              <ProductionLineModel onPartClick={handlePartClick} />
            </Suspense>
            <OrbitControls />
          </Canvas>
        </div>
        <div className="mt-4 flex justify-between">
          <Button onClick={handleGenerateCAD} disabled={isGeneratingCAD}>
            {isGeneratingCAD ? (
              <>
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                Generating CAD File...
              </>
            ) : (
              'Generate CAD File'
            )}
          </Button>
          <Button variant="outline">View Full Parts List</Button>
        </div>
        <div className="mt-4">
          <h4 className="font-semibold mb-2">AI Optimization Suggestions:</h4>
          <ul className="list-disc list-inside">
            {optimizationSuggestions.map((suggestion, index) => (
              <li key={index} className="text-blue-600">
                <Zap className="inline-block w-4 h-4 mr-2" />
                {suggestion}
              </li>
            ))}
          </ul>
        </div>
        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
          <DialogContent className="sm:max-w-[800px]">
            <DialogHeader>
              <DialogTitle>Production Line Analysis</DialogTitle>
              <DialogDescription>
                Detailed metrics and historical data for production line performance
              </DialogDescription>
            </DialogHeader>
            <Tabs defaultValue="metrics">
              <TabsList>
                <TabsTrigger value="metrics">Key Metrics</TabsTrigger>
                <TabsTrigger value="historical">Historical Data</TabsTrigger>
                <TabsTrigger value="part">Part Details</TabsTrigger>
              </TabsList>
              <TabsContent value="metrics">
                <Table>
                  <TableBody>
                    <TableRow>
                      <TableCell className="font-medium">Overall Efficiency</TableCell>
                      <TableCell>{efficiency.toFixed(1)}%</TableCell>
                    </TableRow>
                    <TableRow>
                      <TableCell className="font-medium">Production Rate</TableCell>
                      <TableCell>{productionRate.toFixed(1)} units/hour</TableCell>
                    </TableRow>
                    <TableRow>
                      <TableCell className="font-medium">Quality Score</TableCell>
                      <TableCell>{qualityScore.toFixed(1)}%</TableCell>
                    </TableRow>
                    <TableRow>
                      <TableCell className="font-medium">Energy Consumption</TableCell>
                      <TableCell>{energyConsumption.toFixed(1)}%</TableCell>
                    </TableRow>
                    <TableRow>
                      <TableCell className="font-medium">Maintenance Score</TableCell>
                      <TableCell>{maintenanceScore.toFixed(1)}%</TableCell>
                    </TableRow>
                  </TableBody>
                </Table>
              </TabsContent>
              <TabsContent value="historical">
                <div className="h-[300px]">
                  <ResponsiveContainer width="100%" height="100%">
                    <LineChart data={historicalData.efficiency}>
                      <CartesianGrid strokeDasharray="3 3" />
                      <XAxis dataKey="day" />
                      <YAxis />
                      <Tooltip />
                      <Line type="monotone" dataKey="value" name="Efficiency" stroke="#8884d8" />
                    </LineChart>
                  </ResponsiveContainer>
                </div>
              </TabsContent>
              <TabsContent value="part">
                {selectedPart && (
                  <Table>
                    <TableBody>
                      <TableRow>
                        <TableCell className="font-medium">Name</TableCell>
                        <TableCell>{selectedPart.name}</TableCell>
                      </TableRow>
                      <TableRow>
                        <TableCell className="font-medium">Material</TableCell>
                        <TableCell>{selectedPart.material}</TableCell>
                      </TableRow>
                      <TableRow>
                        <TableCell className="font-medium">Dimensions</TableCell>
                        <TableCell>{selectedPart.dimensions}</TableCell>
                      </TableRow>
                      <TableRow>
                        <TableCell className="font-medium">Weight</TableCell>
                        <TableCell>{selectedPart.weight}</TableCell>
                      </TableRow>
                    </TableBody>
                  </Table>
                )}
              </TabsContent>
            </Tabs>
          </DialogContent>
        </Dialog>
      </CardContent>
    </Card>
  )
}

